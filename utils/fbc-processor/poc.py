import time

import openshift_client as oc
import argparse


parser = argparse.ArgumentParser()
parser.add_argument('-prs', '--pipelineruns', required=False, default='', dest='pipelineruns')

args = parser.parse_args()

prs = args.pipelineruns.split(' ')
print(prs)

print('OpenShift client version: {}'.format(oc.get_client_version()))
type = 'build'
pipeline_base_url = 'https://konflux.apps.stone-prod-p02.hjvn.p1.openshiftapps.com/application-pipeline/workspaces'
workspace = 'rhoai' if type == 'build' else 'rhtap-releng' if type == 'release' else ''

completed_pipelines = {}
failed_pipelines = {}
running_statuses = ['Running']
success_statuses = ['Succeeded', 'Completed']
failed_statuses = ['Failed', 'PipelineRunTimeout', 'PipelineValidationFailed', 'CreateRunFailed']
with oc.project('rhoai-tenant'), oc.timeout(180 * 60):
    for pr in prs:
        if pr in failed_pipelines:
            print(f'FBC stage {type} pipeline {pr} failed with status {failed_pipelines[pr]["status"]}..')
        elif pr in completed_pipelines:
            print(f'FBC stage {type} pipeline {pr} is successfully completed with status {completed_pipelines[pr]["status"]}..')
        else:
            pr_object = oc.selector(f'pr/{pr}').object()
            status = pr_object.model.status.conditions[0].reason
            print(pr, status)
            if status in running_statuses:
                print(f'FBC stage {type} pipeline {pr} is still running..')
            elif status in success_statuses:
                print(f'FBC stage {type} pipeline {pr} is successfully completed with status {status}..')
            elif status in failed_statuses:
                print(f'FBC stage {type} pipeline {pr} failed with status {status}..')
                failed_pipelines[pr] = {'status': status, 'message': pr_object.model.status.conditions[0].message, 'application': pr_object.model.metadata.labels['appstudio.openshift.io/application']}
        time.sleep(1 * 6)
        if len(failed_pipelines) + len(completed_pipelines) == len(prs):
            break


    if len(failed_pipelines):
        print('================ FAILURE SUMMARY ================')
        for pr, data in failed_pipelines.items():
            print(f'****** {pr} ******')
            pipeline_url = f'{pipeline_base_url}/{workspace}/applications/{data["application"]}/pipelineruns/{pr}/logs'
            print(f'FBC stage {type} pipeline {pr} failed with status {data["status"]}')
            print(f'Error: {data["message"]}')
            print(f'Please check full logs at {pipeline_url}')
            print('\n')
        print('Exiting..')
    else:
        print('All the FBC stage build pipelines are successfully completed!!')

import yaml
import json
from collections import defaultdict
from jsonupdate_ng import jsonupdate_ng

# yaml_path = '/home/dchouras/RHODS/DevOps/FBC/main/catalog/v4.13/rhods-operator/catalog.yaml'
# objs = yaml.safe_load_all(open(yaml_path))
# print(type(objs))
# catalog_dict = defaultdict(dict)
# for obj in objs:
#     # print(obj)
#     catalog_dict[obj['schema']][obj['name']] = obj
#
# # print(json.dumps(catalog_dict, indent=4))
#
# patch_yaml_path = '/home/dchouras/RHODS/DevOps/FBC/rhoai-2.13/catalog/catalog-patch.yaml'
# patch_dict = yaml.safe_load(open(patch_yaml_path))
#
# SCHEMA = 'olm.package'
# patch = patch_dict['patch'][SCHEMA]
# catalog_dict[SCHEMA][patch['name']] = jsonupdate_ng.updateJson(catalog_dict[SCHEMA][patch['name']], patch)
# def str_presenter(dumper, data):
#     if data.count('\n') > 0:
#         return dumper.represent_scalar('tag:yaml.org,2002:str', data, style='|')
#     return dumper.represent_scalar('tag:yaml.org,2002:str', data)
#
#
# docs = [doc for schema, schema_dict in catalog_dict.items() for name, doc in schema_dict.items()]
# yaml.add_representer(str, str_presenter)
# yaml.representer.SafeRepresenter.add_representer(str, str_presenter)
# yaml.safe_dump_all(docs, open('output.yaml', 'w'))

# def update_images(images: dict):
#     for key, val in images.items():
#         images[key] = f'{val}+1'
#
#     return images
#
# def process_arr(obj:list):
#     arr = obj['data']
#     for item in arr:
#         item['name'] = 'rahul'
#     return obj
# images = {1: 'a', 2:'b', 3:'c'}
# obj = {'data': [{'name': 'deepak', 'age': 30}]}
# images = update_images(images)
# arr = process_arr(obj)
# print(images)
# print(arr)
# import base64
# encoded = ''
# bundle_str:str = base64.b64decode(encoded).decode('utf-8')
# bundle_object = json.loads(bundle_str)
# if bundle_object['kind'] == 'ClusterServiceVersion':
#     # envs = bundle_object['spec']['install']['spec']['deployments'][0]['spec']['template']['spec']['containers'][0]['env']
#     # for env in envs:
#     #     print(env)
#     bundle_str = bundle_str.replace('registry-proxy.engineering.redhat.com/rh-osbs/managed-open-data-hub-odh-dashboard-rhel8:', 'quay.io/rh-osbs/managed-open-data-hub-odh-dashboard-rhel8:')
#
# open('replaced.json', 'w').write(bundle_str)
# encoded_replaced = base64.b64encode(bundle_str.encode())
# print(encoded_replaced)


