name: Replicate Push Tekton Files for External Release

on:
  workflow_dispatch:
    inputs:
      source_branch:
        description: 'Source branch to copy Tekton files from'
        required: true
        default: 'rhoai-x.y'
      target_branch:
        description: 'Target branch to copy Tekton files to'
        required: true
        default: 'rhoai-x.y'
        
permissions:
  contents: write
  actions: write

jobs:
  copy-push-tekton-files:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Automation Repository
        uses: actions/checkout@v3
        with:
          path: automation_repo
          token: ${{ secrets.GH_TOKEN }}

      - name: Verify external-repos.txt existence
        run: |
          echo "Verifying external-repos.txt location:"
          ls -al automation_repo
          cat automation_repo/external-repos.txt || { echo "Error: external-repos.txt not found"; exit 1; }

      - name: Fetch and Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y git

      - name: Process Repositories
        run: |
          set -e  # Exit immediately if a command exits with a non-zero status

          SOURCE_BRANCH=${{ github.event.inputs.source_branch }}
          TARGET_BRANCH=${{ github.event.inputs.target_branch }}
         
          # Extract major, minor versions from input (e.g., rhoai-2.15 -> 2 15)
          if [[ "$TARGET_BRANCH" =~ rhoai-([0-9]+)\.([0-9]+) ]]; then
            major="${BASH_REMATCH[1]}"
            minor="${BASH_REMATCH[2]}"
          else
            echo "Error: Invalid version format. Expected 'rhoai-X.Y'."
            exit 1
          fi

          VERSION="v${major}.${minor}"  # Version input from workflow trigger


          echo "Extracted version: $VERSION for branch $TARGET_BRANCH"

          # Read each repository URL from external-repos.txt
          while IFS= read -r repo_url; do
            if [[ -z "$repo_url" || "$repo_url" =~ ^# ]]; then
              continue
            fi

            repo_name=$(basename "$repo_url" .git)
            echo "Processing repository: $repo_url"

            # Clone the repository
            git clone "$repo_url"
            cd "$repo_name" || { echo "Failed to enter directory $repo_name"; exit 1; }

            # Configure Git to use the github token for authentication
            git config --global url."https://${{ secrets.GH_TOKEN }}@github.com/".insteadOf "https://github.com/"

            # Check out the source branch
            if ! git checkout "$SOURCE_BRANCH"; then
              echo "Error: Source branch $SOURCE_BRANCH does not exist in $repo_name."
              cd ..
              rm -rf "$repo_name"
              continue
            fi

            echo "Checked out branch $SOURCE_BRANCH"

            # Ensure Tekton files exist
            if [ ! -d ".tekton" ]; then
              echo "Error: Tekton directory does not exist in $SOURCE_BRANCH."
              cd ..
              rm -rf "$repo_name"
              continue
            fi

            # Create a temporary directory to copy only "push" files
            mkdir -p ../tekton_copy_$repo_name

            # Find and copy only "push" files (e.g., files containing "push" in their name)
            for file in .tekton/*push*.yaml; do
              if [ -f "$file" ]; then
                file_name=$(basename "$file")
                #new_file_name=$(echo "$file_name" | sed "s/[0-9]\+-[0-9]\+/${major}-${minor}/g" | sed "s/v[0-9]*\.[0-9]*\.[0-9]*/$VERSION/")
                # Extract version formats
                    if [[ $file_name =~ -([0-9]{3})- ]]; then
                        # Case: must-gather-217-push.yaml
                        version="${major}"
                        new_minor="${minor}" # Extract last two digits and increment
                        new_file_name=$(echo "$file_name" | sed "s/[0-9]\{3\}/v2-${new_minor}/g")

                    elif [[ $file_name =~ -v([0-9]+)-([0-9]+)- ]]; then
                        # Case: must-gather-v2-17-push.yaml
                        new_minor=${minor}
                        new_file_name=$(echo "$file_name" | sed "s/v${major}-${minor}/v${major}-${new_minor}/g")

                    else
                        echo "No matching version format found!"
                        exit 1
                    fi
                if [[ "$file_name" != "$new_file_name" ]]; then
                  mv "$file" "../tekton_copy_$repo_name/$new_file_name"
                  echo "Renamed file from $file_name to $new_file_name"
                else
                  cp "$file" "../tekton_copy_$repo_name/$file_name"
                  echo "No renaming needed for $file_name"
                fi
              fi
            done
            
            # Check out the target branch
            if ! git checkout "$TARGET_BRANCH"; then
              echo "Error: Target branch $TARGET_BRANCH does not exist. Creating it."
              git checkout -b "$TARGET_BRANCH"
            fi

            echo "Checked out branch $TARGET_BRANCH"

            # Copy the renamed files to the target branch's .tekton directory
            mkdir -p .tekton
            cp -r ../tekton_copy_$repo_name/* .tekton/

            # Update version and references in the "push" Tekton files
            for file in .tekton/*push*.yaml; do
              if [ -f "$file" ]; then
                # Replace version references (e.g., v2.13 or v2-13) to match the input version (e.g., v2.15.0)
                sed -i "s/\bv[0-9]\+\.[0-9]\+\.[0-9]\+\b/$VERSION/g" "$file"

                # Replace version references like rhoai-x.y with rhoai-2.15
                sed -i "s/\brhoai-[0-9]\+\.[0-9]\+\b/rhoai-${major}.${minor}/g" "$file"

                # Replace vx-y references with the target version (e.g., v2-13 -> v2-15)
                sed -i "s/\bv[0-9]\+-[0-9]\+\b/v${major}-${minor}/g" "$file"

                # replace occurence of 217 with v2-17
                if grep -qE '\b[0-9]{3}\b' "$file"; then
                    old_version=$(grep -oE '\b[0-9]{3}\b' "$file" | head -n 1)  # Extract first match
                    new_version="v${major}-${minor}"
                    # Replace all occurrences of 217 (or any three-digit pattern) with v{major}-{minor}
                    sed -i "s/\b${old_version}\b/${new_version}/g" "$file"
                fi

              fi
            done

            # Add and commit changes
            git add .tekton
            git config user.name "github-actions"
            git config user.email "github-actions@users.noreply.github.com"

            if git diff --staged --quiet; then
              echo "No changes to commit for branch $TARGET_BRANCH."
            else
              git commit -m "Sync push Tekton files from $SOURCE_BRANCH to $TARGET_BRANCH with updated versioning"
              git push origin "$TARGET_BRANCH"
              echo "Pushed changes to branch $TARGET_BRANCH in $repo_name."
            fi

            # Clean up
            cd ..
            rm -rf "$repo_name" "tekton_copy_$repo_name"
          done < automation_repo/external-repos.txt

      - name: Cleanup Workflow
        run: echo "Workflow execution completed."
